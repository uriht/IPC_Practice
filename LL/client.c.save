#include "selvan_head.h"


int main(int argc, char *argv[])
{
    struct sockaddr_un addr;
    int i;
    int ret;
    int data_socket;
    char buffer[BUFFER_SIZE];

    /* Create data socket. */

    data_socket = socket(AF_UNIX, SOCK_STREAM, 0);

    if (data_socket == -1) {
        perror("socket");
        exit(EXIT_FAILURE);
    }

    /*
     * For portability clear the whole structure, since some
     * implementations have additional (nonstandard) fields in
     * the structure.
     * */

    memset(&addr, 0, sizeof(struct sockaddr_un));

    /* Connect socket to socket address */

    addr.sun_family = AF_UNIX;
    strncpy(addr.sun_path, SOCKET_NAME, sizeof(addr.sun_path) - 1);

    ret = connect (data_socket, (const struct sockaddr *) &addr,
            sizeof(struct sockaddr_un));

    if (ret == -1) {
        fprintf(stderr, "The server is down.\n");
        exit(EXIT_FAILURE);
    }

    // /* Send arguments. */
    // do{
    //     printf("Enter number to send to server :\n");
    //     scanf("%d", &i);
    //     ret = write(data_socket, &i, sizeof(int));
    //     if (ret == -1) {
    //         perror("write");
    //         break;
    //     }
    //     printf("No of bytes sent = %d, data sent = %d\n", ret, i);
    // } while(i);

    // /* Request result. */

    // memset(buffer, 0, BUFFER_SIZE);
    // strncpy (buffer, "RES", strlen("RES"));
    // buffer[strlen(buffer)] = '\0';
    // printf("buffer = %s\n", buffer);

    // ret = write(data_socket, buffer, strlen(buffer));
    // if (ret == -1) {
    //     perror("write");
    //     exit(EXIT_FAILURE);
    // }

    // /* Receive result. */
    // memset(buffer, 0, BUFFER_SIZE);

    // ret = read(data_socket, buffer, BUFFER_SIZE);
    // if (ret == -1) {
    //     perror("read");
    //     exit(EXIT_FAILURE);
    // }

    // /* Ensure buffer is 0-terminated. */

    // buffer[BUFFER_SIZE - 1] = 0;

    // printf("Result = %s\n", buffer);

    for(;;) {
        int  val, pos;
        struct Node * head1,*rhead;

        char choice;
        do {
            /*Prepare the buffer to recv the data*/
            memset(head1, 0, sizeof(struct Node *));

            /* Wait for next data packet. */
            /*Client is blocked here. Waiting for the data to arrive from client
             * 'read' is a blocking system call*/
            printf("Waiting for data from the server\n");
            ret = read(data_socket, head1, sizeof(struct Node *));

            if (ret == -1) {
                perror("read");
                exit(EXIT_FAILURE);
            }

            /* Add received summand. */
            memcpy(&rhead, head1, sizeof(struct Node *));
            // if(rhead == 0) break;
            // result += data;
            printf ("\nChoose a option from given menu:\n");
            printf ("1. Find value at position\n");
            printf ("2. Exit\n");
            printf ("Enter your choice: ");
            scanf (" %c", &choice);
            switch (choice) {
                case '1':
                    printf ("Enter the position : ");
                    scanf ("%d", &val);
                    struct Node *ptr = findValueAtPosition (rhead, val);
                    if (ptr != NULL)
                      printf ("The value is => %d\n", ptr->data);
                    break;
                case '2':
                    printf ("Bye Bye.. Tata\n");
                    break;

                default:
                    printf ("Invalid choice!\n");
                    break;
            }
        } while (choice != '2');
        break;      
    }

    /* Close socket. */

    close(data_socket);

    exit(EXIT_SUCCESS);
}
