#include "selvan_head.h"

int no_of_nodes;
int ins_flag;
int del_flag;

int main(int argc, char *argv[])
{
    struct sockaddr_un name;

#if 0
    struct sockaddr_un {
        sa_family_t sun_family;               /* AF_UNIX */
        char        sun_path[108];            /* pathname */
    };
#endif

    int ret;
    int connection_socket;
    int data_socket;

    struct Node *head = NULL;
    int  val, pos;
    char choice;

    int data;
    char buffer[BUFFER_SIZE];

    /*In case the program exited inadvertently on the last run,
     *remove the socket.
     **/

    unlink(SOCKET_NAME);

    /* Create Master socket. */

    /*SOCK_DGRAM for Datagram based communication*/
    connection_socket = socket(AF_UNIX, SOCK_STREAM, 0);

    if (connection_socket == -1) {
        perror("socket");
        exit(EXIT_FAILURE);
    }

    printf("Master socket created\n");

    /*initialize*/
    memset(&name, 0, sizeof(struct sockaddr_un));

    /*Specify the socket Cridentials*/
    name.sun_family = AF_UNIX;
    strncpy(name.sun_path, SOCKET_NAME, sizeof(name.sun_path) - 1);

    /* Bind socket to socket name.*/
    /* Purpose of bind() system call is that application() dictate the underlying
     * operating system the criteria of recieving the data. Here, bind() system call
     * is telling the OS that if sender process sends the data destined to socket "/tmp/DemoSocket",
     * then such data needs to be delivered to this server process (the server process)*/
    
    ret = bind(connection_socket, (const struct sockaddr *) &name,
            sizeof(struct sockaddr_un));

    if (ret == -1) {
        perror("bind");
        exit(EXIT_FAILURE);
    }

    printf("bind() call succeed\n");
    /*
     * Prepare for accepting connections. The backlog size is set
     * to 20. So while one request is being processed other requests
     * can be waiting.
     * */

    ret = listen(connection_socket, 20);
    if (ret == -1) {
        perror("listen");
        exit(EXIT_FAILURE);
    }

    /* This is the main loop for handling connections. */
    /*All Server process usually runs 24 x 7. Good Servers should always up
     * and running and shold never go down. Have you ever seen Facebook Or Google
     * page failed to load ??*/
    for (;;) {

        /* Wait for incoming connection. */
        printf("Waiting on accept() sys call\n");

        data_socket = accept(connection_socket, NULL, NULL);

        if (data_socket == -1) {
            perror("accept");
            exit(EXIT_FAILURE);
        }

        printf("Connection accepted from client\n");

        head = NULL;
        for(;;) {

        /* Wait for next data packet. */
        /* Server is blocked here. Waiting for the data to arrive from client. */
        /* 'recv' is a blocking system call */
        printf("Waiting for data from the client\n");
        int bytes_received = recv(data_socket, buffer, BUFFER_SIZE, 0);

        if (bytes_received == -1) {
            perror("recv");
            exit(EXIT_FAILURE);
        }

        /* Deserialize the byte buffer into a struct Node* */
        struct Node* head = (struct Node*)buffer;
        printf("Got the Head Successfully\n");

        /* Close socket. */
        close(data_socket);
    }
do {
        printf ("\nChoose a option from given menu:\n");
        printf ("1. Find value at position\n");
        printf ("2. Exit\n");
        printf ("Enter your choice: ");
        scanf (" %c", &choice);
        switch (choice) {
            case '1':
                printf ("Enter the value : ");
                scanf ("%d", &val);
                struct Node *ptr = findValueAtPosition (head, val);
                if (ptr != NULL)
                  printf ("The value is => %d\n", ptr->data);
                break;

            case '2':
                printf ("Bye Bye.. Tata\n");
                break;

            default:
                printf ("Invalid choice!\n");
                break;
        }
    } while (choice != '2');
    /*close the master socket*/
    close(connection_socket);
    printf("connection closed..\n");

    /* Server should release resources before getting terminated.
     * Unlink the socket. */

    unlink(SOCKET_NAME);
    exit(EXIT_SUCCESS);
    // cleanup all the memory used by our LL
    struct Node* temp;
    while (head != NULL) {
        temp = head;
        head = head->next;
        free(temp);
    }

}
